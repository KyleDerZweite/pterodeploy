# PteroDeploy Environment Configuration
# Copy this file to .env and update with your actual values

# =============================================================================
# SERVER CONFIGURATION
# =============================================================================

# Node environment (development, production, test)
NODE_ENV=development

# =============================================================================
# AUTHENTICATION & SECURITY
# =============================================================================

# JWT secret for token signing (generate a secure random string)
# You can generate one with: node -e "console.log(require('crypto').randomBytes(64).toString('hex'))"
JWT_SECRET=your-super-secure-jwt-secret-key-here-make-it-long-and-random

# AES-256 encryption key for storing sensitive data (API keys, etc.)
# MUST be exactly 64 hex characters (32 bytes)
# Generate with: node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
SECRET_ENCRYPTION_KEY=0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef

# =============================================================================
# DATABASE CONFIGURATION
# =============================================================================

# Database URL (SQLite by default, can be changed to PostgreSQL/MySQL in production)
DATABASE_URL="file:./pterodeploy.db"

# =============================================================================
# AI PROVIDER CONFIGURATIONS
# =============================================================================

# Note: These are optional - you can configure AI providers through the admin dashboard
# Set these only if you want to pre-configure providers via environment variables

# OpenAI Configuration
OPENAI_API_KEY=sk-your-openai-api-key-here
OPENAI_BASE_URL=https://api.openai.com/v1

# Ollama Configuration (for local AI models)
OLLAMA_URL=http://localhost:11434
OLLAMA_MODEL=llama2

# =============================================================================
# REDIS CONFIGURATION (for BullMQ job processing)
# =============================================================================

# Redis URL for job queue processing
REDIS_URL=redis://localhost:6379

# =============================================================================
# DEVELOPMENT SETTINGS
# =============================================================================

# Enable debug logging
DEBUG=false

# CORS origins for development (comma-separated)
CORS_ORIGINS=http://localhost:5173,http://localhost:3000

# =============================================================================
# PRODUCTION SETTINGS
# =============================================================================

# When NODE_ENV=production, these settings are recommended:

# Disable CORS for production (only allow specific origins)
# CORS_ORIGINS=https://your-domain.com

# Use stronger rate limiting in production
# RATE_LIMIT_WINDOW_MS=900000
# RATE_LIMIT_MAX_REQUESTS=100

# Database connection pooling for production
# DATABASE_POOL_MIN=2
# DATABASE_POOL_MAX=10

# =============================================================================
# QUICK SETUP CHECKLIST
# =============================================================================

# 1. Copy this file to .env
# 2. Generate JWT_SECRET (64+ character random string)
# 3. Generate SECRET_ENCRYPTION_KEY (exactly 64 hex characters)
# 4. Configure at least one AI provider (OpenAI recommended for testing)
# 5. Set up Redis if using job processing features
# 6. Update CORS_ORIGINS for your frontend URL
# 7. Set NODE_ENV=production for production deployment

# =============================================================================
# EXAMPLE GENERATION COMMANDS
# =============================================================================

# Generate JWT_SECRET:
# node -e "console.log(require('crypto').randomBytes(64).toString('hex'))"

# Generate SECRET_ENCRYPTION_KEY:
# node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"

# Verify your .env file:
# node -e "require('dotenv').config(); console.log('âœ… Environment loaded successfully')"