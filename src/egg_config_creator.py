"""
Unzipped Modpack + Template + Comparison Config -> Create Egg Config
"""
import json
import os
from typing import Dict, Any, Optional

class EggConfigCreator:
    """
    Creates a Pterodactyl egg configuration from an analysis report and a base template.
    """

    def __init__(self, analysis_report: Dict[str, Any], base_egg_template: Optional[Dict[str, Any]] = None):
        """
        Initializes the EggConfigCreator.

        Args:
            analysis_report (Dict[str, Any]): The report generated by ModpackAnalyser.
            base_egg_template (Optional[Dict[str, Any]]): A base Pterodactyl egg JSON as a dict.
                                                          If None, a default will be used.
        """
        self.report = analysis_report
        self.template = base_egg_template if base_egg_template else self._get_default_template()

    def _get_default_template(self) -> Dict[str, Any]:
        """Provides a very basic, default egg structure."""
        return {
            "name": "Generated Modpack Egg",
            "author": "pterodeploy@example.com",
            "description": "An egg generated for a specific modpack.",
            "docker_image": "itzg/minecraft-server:java17",
            "startup": "java -Xms128M -Xmx{{SERVER_MEMORY}}M -jar {{STARTUP_JAR}} nogui",
            "variables": [
                {
                    "name": "Startup JAR",
                    "description": "The main JAR file to run.",
                    "env_variable": "STARTUP_JAR",
                    "default_value": "server.jar",
                    "user_viewable": True,
                    "user_editable": True,
                    "rules": "required|string",
                },
                {
                    "name": "Server Memory",
                    "description": "Amount of RAM to allocate to the server.",
                    "env_variable": "SERVER_MEMORY",
                    "default_value": "2048",
                    "user_viewable": True,
                    "user_editable": True,
                    "rules": "required|numeric|min:1024",
                }
            ]
        }

    def create_egg_config(self) -> Dict[str, Any]:
        """
        Generates the final Pterodactyl egg configuration.

        Returns:
            Dict[str, Any]: The generated egg configuration as a dictionary.
        """
        egg_config = self.template.copy() # Start with the base template

        # --- Customize based on analysis report ---

        # Set a more descriptive name
        modpack_name = os.path.basename(self.report.get("modpack_path", "UnknownPack"))
        egg_config["name"] = f"{modpack_name} Egg"
        egg_config["description"] = f"Pterodactyl Egg for the {modpack_name} modpack."

        # Update startup command and variables
        startup_info = self.report.get("startup_info", {})
        startup_jar = startup_info.get("startup_jar")

        if startup_jar:
            # Find the 'Startup JAR' variable and update its default
            for var in egg_config.get("variables", []):
                if var.get("env_variable") == "STARTUP_JAR":
                    var["default_value"] = startup_jar
                    break
        
        # Adjust for modloader if needed
        modloader_info = self.report.get("modloader_info", {})
        loader = modloader_info.get("loader")
        
        if loader == "forge":
            # Forge might need specific arguments
            # This is a simplified example. Real-world scenarios might be more complex.
            print("Detected Forge, no special startup changes applied in this basic version.")
        elif loader == "fabric":
            # Fabric might use a different startup convention
            egg_config["docker_image"] = "itzg/minecraft-server:java17-fabric"
            print("Detected Fabric, updated Docker image to include Fabric.")

        # You could add more complex logic here, e.g., for different Java versions,
        # parsing startup scripts for JVM args, etc.

        print("Egg configuration created successfully.")
        return egg_config

    def save_egg_config(self, output_path: str):
        """
        Saves the generated egg configuration to a JSON file.

        Args:
            output_path (str): The path to save the JSON egg file.
        """
        egg_config = self.create_egg_config()
        
        # Ensure the output directory exists
        os.makedirs(os.path.dirname(output_path), exist_ok=True)

        with open(output_path, 'w') as f:
            json.dump(egg_config, f, indent=4)
        print(f"Egg configuration saved to: {output_path}")